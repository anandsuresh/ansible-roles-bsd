#!/usr/bin/env sh

#-------------------------------------------------------------------------------
#                             ANSIBLE MANAGED FILE
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# INFORMATION
#-------------------------------------------------------------------------------
#        o
#    ____|____
#   |         |  Name   : ansible_run-playbook.sh
#   |  _   _  |  Type   : shell script
#   | [_] [_] |  Role   : ansible
#   |____~____|
#    ___//__//   Authors: robomon community
#   /|     |/    License: Simplified BSD License
#  //|_____|
#    _|| ||_     Webpage: http://www.robomon.org/
#   (__| |__)
#-------------------------------------------------------------------------------
# DESCRIPTION
#-------------------------------------------------------------------------------
#
# This script runs Ansible playbooks.
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SHELL VARIABLES
#-------------------------------------------------------------------------------

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

#-------------------------------------------------------------------------------
# COMMANDS
#-------------------------------------------------------------------------------

which='/usr/bin/which' && [ -x $which ] || exit 0100
basename=$($which basename) || exit 0101
chmod=$($which chmod) || exit 0102
find=$($which find) || exit 0103
date=$($which date) || exit 0104
echo=$($which echo) || exit 0105
expr=$($which expr) || exit 0106
hostname=$($which hostname) || exit 0107
logger=$($which logger) || exit 0108
{% if (ansible_monitor_mail_state is defined) and ((ansible_monitor_mail_state == 'true') or (ansible_monitor_mail_state == 'yes') or (ansible_monitor_mail_state == 'enable')) %}
mailx=$($which mailx) || exit 0109
{% endif %}
rm=$($which rm) || exit 0110
touch=$($which touch) || exit 0111
whoami=$($which whoami) || exit 0112

#-------------------------------------------------------------------------------
# VARIABLES
#-------------------------------------------------------------------------------

# Get the short host name
host=$($hostname -s) || exit 0200

# Get the script name and PID
script="$($basename $0)[$$]" || exit 0201

# Get the start date and time
date_start=$($date '+%Y-%m-%dT%H:%M:%S%z')

# Get the start time (seconds since 1970-01-01T00:00:00+00:00)
time_start=$($date '+%s')

# Define the script user
user='{{file_owner_ansible_run_playbook_sh}}'

# Define the lockfile location
lockfile='{{file_path_ansible_script_dir}}/ansible_run-playbook.lock'

# Set the initial return value
retval=0

# Set the initial exit code
code='0000'

# Define the initial log severity
severity='Debug'

# Define the initial log message
message='Please check log files for more information.'

# Set the execute date and time (e.g. 19700123-235515)
exec_date=$($date '+%Y%m%d-%H%M%S')

# Define the Ansible directory
ansible_dir='{{file_path_ansible_ansible_dir}}'

# Define the Ansible log directory
log_dir='{{file_path_ansible_log_dir}}'

# Define the Ansible log mode
log_mode='0640'

# Define the Ansible log owner
log_owner='{{file_owner_ansible_log_dir}}'

# Define the Ansible log group
log_group='{{file_group_ansible_log_dir}}'

# Define the Ansible playbooks directory
playbooks_dir='{{file_path_ansible_playbooks_dir}}'

# Define the Ansible roles directory
roles_dir='{{file_path_ansible_roles_dir}}'

# Define the Ansible playbooks
playbooks='{% if (ansible_playbooks is defined) and not ((ansible_playbooks == None) or (ansible_playbooks == '') or (ansible_playbooks == [])) %}{% for playbook in ansible_playbooks %}{{(playbook|e)}}{% if not loop.last %} {% endif %}{% endfor %}{% endif %}'

# Set the period (days) after purging log files
purge_period='{% if (ansible_purge_log_period is defined) and not ((ansible_purge_log_period == None) or (ansible_purge_log_period == '')) %}{{(ansible_purge_log_period|int(30))}}{% else %}30{% endif %}'

{% if (ansible_monitor_mail_state is defined) and ((ansible_monitor_mail_state == 'true') or (ansible_monitor_mail_state == 'yes') or (ansible_monitor_mail_state == 'enable')) %}
# Define the mail sender
mail_sender='{% if (ansible_monitor_mail_sender is defined) and not ((ansible_monitor_mail_sender == None) or (ansible_monitor_mail_sender == '')) %}{{(ansible_monitor_mail_sender|e)}}{% else %}root@{{(ansible_domain|e)}}{% endif %}'

# Define the mail recipient
mail_recipient='{% if (ansible_monitor_mail_recipient is defined) and not ((ansible_monitor_mail_recipient == None) or (ansible_monitor_mail_recipient == '') or (ansible_monitor_mail_recipient == [])) %}{% for mail_recipient in ansible_monitor_mail_recipient %}{{(mail_recipient|e)}}{% if not loop.last %},{% endif %}{% endfor %}{% else %}admin@{{ansible_domain}}{% endif %}'

# Define the mail subject
mail_subject='{% if (ansible_monitor_mail_subject is defined) and not ((ansible_monitor_mail_subject == None) or (ansible_monitor_mail_subject == '')) %}{{(ansible_monitor_mail_subject|e)}}{% else %}Ansible: Run playbook - Error ({{ansible_hostname}}){% endif %}'
{% endif %}

#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------

{% if (ansible_monitor_mail_state is defined) and ((ansible_monitor_mail_state == 'true') or (ansible_monitor_mail_state == 'yes') or (ansible_monitor_mail_state == 'enable')) %}
# Mail monitoring
mail_error () {
  retval=$1
  code=$2
  severity=$3
  message=$4
  # Define the mail body
  mail_body="--------------------------------------------------------------------------------
ERROR
--------------------------------------------------------------------------------

Message     : $message
Severity    : $severity
Code        : $code
Date & Time : $($date '+%Y-%m-%dT%H:%M:%S%z')

--------------------------------------------------------------------------------
SCRIPT
--------------------------------------------------------------------------------

Name        : ansible_run-playbook.sh
Type        : shell script
PID         : $$

--------------------------------------------------------------------------------
SYSTEM
--------------------------------------------------------------------------------

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}

--------------------------------------------------------------------------------
OPERATING SYSTEM
--------------------------------------------------------------------------------

Type        : {{ansible_system}}
Family      : {{ansible_os_family}}
Distribution: {{ansible_distribution}}
Version     : {{ansible_distribution_version}}
Architecture: {{ansible_architecture}}

--------------------------------------------------------------------------------
KERNEL
--------------------------------------------------------------------------------

Type        : {{ansible_system}}
Version     : {{ansible_kernel}}

--------------------------------------------------------------------------------
MAIL
--------------------------------------------------------------------------------

Sender      : $mail_sender
Recipient   : $mail_recipient
Subject     : $mail_subject"

{% if (ansible_os_family == 'FreeBSD') %}
  $echo "$mail_body" | $mailx -s "$mail_subject" -F "$mail_recipient" > /dev/null 2>&1
{% else %}
  $echo "$mail_body" | $mailx -a "From: "$mail_sender"" -s "$mail_subject" "$mail_recipient" > /dev/null 2>&1
{% endif %}
}
{% endif %}

# Log and exit if return value is not equal zero
log_and_exit_if_error () {
  retval=$1
  code=$2
  severity=$3
  message=$4
  if [ $retval -ne 0 ]; then
    $rm -f $lockfile
    $echo "$($date '+%Y-%m-%dT%H:%M:%S%z') - $host - $script: "$severity: $code - $message""
    $logger -t $script "$severity: $code - $message"
{% if (ansible_monitor_mail_state is defined) and ((ansible_monitor_mail_state == 'true') or (ansible_monitor_mail_state == 'yes') or (ansible_monitor_mail_state == 'enable')) %}
    mail_error $retval $code "$severity" "$message"
{% endif %}
    exit $retval
  fi
}

#-------------------------------------------------------------------------------
# CHECKS
#-------------------------------------------------------------------------------

# Check if script is running as correct user
if [ "$($whoami)" != "$user" ]; then
  code='0300'
  severity='Error'
  message="Please run script as user '$user'"
  $echo "$($date '+%Y-%m-%dT%H:%M:%S%z') - $host - $script: "$severity "($code)": $message""
  exit $code
fi

#-------------------------------------------------------------------------------
# LOCKFILE
#-------------------------------------------------------------------------------

# Create lockfile
if [ ! -e $lockfile ]; then
  $touch $lockfile || log_and_exit_if_error "$?" '0400' 'Warning' 'Could not create lockfile. Please investigate.'
else
  log_and_exit_if_error "$?" '0401' 'Warning' 'Lockfile does already exist. Please investigate.'
fi

#-------------------------------------------------------------------------------
# SCRIPT
#-------------------------------------------------------------------------------

# Check if Ansible 'env-setup' file exist
if [ ! -e ${ansible_dir}/hacking/env-setup ]; then
  log_and_exit_if_error "$?" '0500' 'Error' "Ansible 'env-setup' file does not exist."
fi

# Load Ansible environment variables
source ${ansible_dir}/hacking/env-setup > /dev/null 2>&1
log_and_exit_if_error "$?" '0501' 'Error' 'Unable to load Ansible environment variables.'

# Check if Ansible 'ansible-playbook' command is available
ansible_playbook=$($which ansible-playbook)
log_and_exit_if_error "$?" '0502' 'Error' "Ansible 'ansible-playbook' command is not available."

# Insert Ansible log header
$echo "--------------------------------------------------------------------------------
INFORMATION
--------------------------------------------------------------------------------

Name        : ansible_run-playbook.sh
Type        : sh script
PID         : $$
Date & Time : $date_start
Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}

--------------------------------------------------------------------------------
" > "${log_dir}/ansible_${exec_date}.log"
log_and_exit_if_error "$?" '0503' 'Error' 'Unable to insert Ansible log header.'

# Ensure proper file permission
$find $log_dir -type f -name "ansible_${exec_date}.log" -exec $chmod $log_mode '{}' ';'
log_and_exit_if_error "$?" '0504' 'Error' 'Unable to ensure proper file permission.'

# Run Ansible playbooks
for playbook in $playbooks ; do
  # Insert playbook 'begin' tag
  $echo "
--------------------------------------------------------------------------------
PLAYBOOK ($playbook) - BEGIN
--------------------------------------------------------------------------------
" >> "${log_dir}/ansible_${exec_date}.log"
  log_and_exit_if_error "$?" '0505' 'Error' "Unable to insert playbook 'begin' tag."

  $ansible_playbook -i ${playbooks_dir}/${playbook}/hosts ${playbooks_dir}/${playbook}/site.yml --user=ansible --sudo >> "${log_dir}/ansible_${exec_date}.log" 2>&1
  if [ "$?" -eq '0' ]; then
    severity='Info'
    message="Ansible playbook '$playbook' executed."
    $logger -t $script "$severity: $message"
  else
    log_and_exit_if_error "$?" '0506' 'Error' "Unable to run Ansible playbook '$playbook'."
  fi
  # Insert playbook 'end' tag
  $echo "
--------------------------------------------------------------------------------
PLAYBOOK ($playbook) - END
--------------------------------------------------------------------------------
" >> "${log_dir}/ansible_${exec_date}.log"
  log_and_exit_if_error "$?" '0507' 'Error' "Unable to insert playbook 'end' tag."
done

# Remove old Ansible log files
$find $log_dir -type f -name "ansible_*.log" -mtime +$purge_period -exec $rm -f '{}' ';'
log_and_exit_if_error "$?" '0508' 'Error' 'Unable to remove old Ansible log files.'

#-------------------------------------------------------------------------------
# LOCKFILE
#-------------------------------------------------------------------------------

# Delete lockfile
if [ -e $lockfile ]; then
  $rm -f $lockfile || log_and_exit_if_error "$?" '0402' 'Warning' 'Could not delete lockfile. Please investigate.'
else
  log_and_exit_if_error "$?" '0403' 'Warning' 'Lockfile did not exist. Please investigate.'
fi

#-------------------------------------------------------------------------------
# LOGGING
#-------------------------------------------------------------------------------

# Get the end date and time
date_end=$($date '+%Y-%m-%dT%H:%M:%S%z')

# Get the end time (seconds since 1970-01-01T00:00:00+00:00)
time_end=$($date '+%s')

# Calculate execution time
time_exec=$($expr $time_end - $time_start)

# Convert execution time into human readable format
{% if (ansible_os_family == 'Gentoo') %}
time_hr=$($date -d "1970-01-01 $time_exec sec" '+%H:%M:%S')
{% else %}
time_hr=$($date -u -r "$time_exec" '+%H:%M:%S')
{% endif %}

# Logging and alerting
retval=0
code='0000'
severity='Info'
message='All Ansible playbooks executed.'
$logger -t $script "$severity: $message"
$logger -t $script "Duration: $time_hr"

exit $retval

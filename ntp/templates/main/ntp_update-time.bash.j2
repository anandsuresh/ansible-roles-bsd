#!/bin/bash

#-------------------------------------------------------------------------------
#                             ANSIBLE MANAGED FILE
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# INFORMATION
#-------------------------------------------------------------------------------
#       o
#   ____|____
#  |         |   Name   : ntp_update-time.bash
#  |  _   _  |   Type   : bash script
#  | [_] [_] |   Role   : ntp
#  |____~____|
#     ___\\__    Authors: robomon community
#  \\/|     |\   License: GNU General Public License version 2 (GPLv2)
#   \/|_____|\\
#     _|| ||_//  Webpage: http://www.robomon.org/
#    (__| |__)
#-------------------------------------------------------------------------------
# DESCRIPTION
#-------------------------------------------------------------------------------
#
# This script updates system time and hardware clock (RTC).
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SHELL VARIABLES
#-------------------------------------------------------------------------------

SHELL='/bin/bash'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

#-------------------------------------------------------------------------------
# COMMANDS
#-------------------------------------------------------------------------------

which='/usr/bin/which'

basename=$($which basename) || exit 1
hwclock=$($which hwclock) || exit 1
date=$($which date) || exit 1
echo=$($which echo) || exit 1
expr=$($which expr) || exit 1
hostname=$($which hostname) || exit 1
logger=$($which logger) || exit 1
rm=$($which rm) || exit 1
touch=$($which touch) || exit 1
whoami=$($which whoami) || exit 1

# Determine available NTP command
if [ -x "$($which sntp 2> /dev/null)" ]; then
  ntp='sntp --settod --syslog'
elif [ -x "$($which ntpdate 2> /dev/null)" ]; then
  ntp='ntpdate -s'
else
  exit 1
fi

#-------------------------------------------------------------------------------
# VARIABLES
#-------------------------------------------------------------------------------

# Get short host name
host=$($hostname -s)

# Get scriptname and PID
script="$($basename $0)[$$]"

# Get start date and time
date_start=$($date '+%Y-%m-%d %H:%M:%S')

# Get start instant (seconds since 1970-01-01 00:00:00 UTC)
instant_start=$($date '+%s')

# Specify script user
user='{{file_owner_ntp_update_time_bash}}'

# Specify lockfile location
lockfile='{{file_path_ntp_script_dir}}/ntp_update-time.lock'

# Set initial return value
retval='0'

# Set initial log severity
severity='Debug'

# Set initial log message
message='Please check log files for more information.'

# List of NTP servers
ntp_servers='{% if not ((ntp_server == None) or (ntp_server == '') or (ntp_server == [])) %}{% for server in ntp_server %}{{server}} {% endfor %}{% else %}ntp.{{ansible_domain}}{% endif %}'

#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------

# Log and exit if return value is not equal zero
log_and_exit_if_error () {
  retval=$1
  severity=$2
  message=$3
  if [ "$retval" -ne '0' ]; then
    $rm -f $lockfile
    $echo "$($date '+%Y-%m-%dT%H:%M:%S%:z') - $host - $script: "$severity: $message""
    $logger -t $script "$severity: $message"
    exit $retval
  fi
}

#-------------------------------------------------------------------------------
# CHECKS
#-------------------------------------------------------------------------------

# Check if script is running as correct user
if [ "$($whoami)" != "$user" ]; then
  severity='Error'
  message="Please run script as user '$user'"
  $echo "$($date '+%Y-%m-%dT%H:%M:%S%:z') - $host - $script: "$severity: $message""
  exit 1
fi

#-------------------------------------------------------------------------------
# LOCKFILE
#-------------------------------------------------------------------------------

# Create lockfile
if [ ! -e $lockfile ]; then
  $touch $lockfile || log_and_exit_if_error "$?" 'Warning' 'Could not create lockfile. Please investigate.'
else
  log_and_exit_if_error "$?" 'Warning' 'Lockfile does already exist. Please investigate.'
fi

#-------------------------------------------------------------------------------
# SCRIPT
#-------------------------------------------------------------------------------

# Update the system time by polling NTP servers to determine the correct time
for ntp_server in $ntp_servers ; do
  $ntp $ntp_server > /dev/null 2>&1
  log_and_exit_if_error "$?" 'Error' 'Unable to update the system time.'
done

# Update the hardware clock to the system time
$hwclock -w
log_and_exit_if_error "$?" 'Error' 'Unable to update the hardware clock.'

#-------------------------------------------------------------------------------
# LOCKFILE
#-------------------------------------------------------------------------------

# Delete lockfile
if [ -e $lockfile ]; then
  $rm -f $lockfile || log_and_exit_if_error "$?" 'Warning' 'Could not delete lockfile. Please investigate.'
else
  log_and_exit_if_error "$?" 'Warning' 'Lockfile did not exist. Please investigate.'
fi

#-------------------------------------------------------------------------------
# LOGGING
#-------------------------------------------------------------------------------

# Get end date and time
date_end=$($date '+%Y-%m-%d %H:%M:%S')

# Get end instant (seconds since 1970-01-01 00:00:00 UTC)
instant_end=$($date '+%s')

# Calculate execution time
exec_calc=$($expr $instant_end - $instant_start)

# Convert execution time
exec_time=$($date -d "1970-01-01 $exec_calc sec" '+%H:%M:%S')

# Logging and alerting
retval='0'
severity='Informational'
message='System time and hardware clock updated.'
$logger -t $script "$severity: $message"
$logger -t $script "Duration: $exec_time"

exit $retval

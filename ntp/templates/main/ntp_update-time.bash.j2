#!/bin/bash

#-------------------------------------------------------------------------------
#                             ANSIBLE MANAGED FILE
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# INFORMATION
#-------------------------------------------------------------------------------
#        o
#    ____|____
#   |         |  Name   : ntp_update-time.bash
#   |  _   _  |  Type   : bash script
#   | [_] [_] |  Role   : ntp
#   |____~____|
#    ___//__//   Authors: robomon community
#   /|     |/    License: Simplified BSD License
#  //|_____|
#    _|| ||_     Webpage: http://www.robomon.org/
#   (__| |__)
#-------------------------------------------------------------------------------
# DESCRIPTION
#-------------------------------------------------------------------------------
#
# This script updates system time and hardware clock (RTC).
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SHELL VARIABLES
#-------------------------------------------------------------------------------

SHELL='/bin/bash'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

#-------------------------------------------------------------------------------
# COMMANDS
#-------------------------------------------------------------------------------

which='/usr/bin/which' && [[ -x $which ]] || exit 0100
basename=$($which basename) || exit 0101
hwclock=$($which hwclock) || exit 0102
date=$($which date) || exit 0103
echo=$($which echo) || exit 0104
expr=$($which expr) || exit 0105
hostname=$($which hostname) || exit 0106
logger=$($which logger) || exit 0107
{% if (ntp_monitor_mail_state is defined) and ((ntp_monitor_mail_state == 'true') or (ntp_monitor_mail_state == 'yes') or (ntp_monitor_mail_state == 'enable')) %}
mailx=$($which mailx) || exit 0108
{% endif %}
rm=$($which rm) || exit 0109
touch=$($which touch) || exit 0110
whoami=$($which whoami) || exit 0111

# Determine available NTP command
if [ -x "$($which sntp 2> /dev/null)" ]; then
  ntp_command='sntp --settod --syslog'
elif [ -x "$($which ntpdate 2> /dev/null)" ]; then
  ntp_command='ntpdate -s -b'
else
  exit 0112
fi

#-------------------------------------------------------------------------------
# VARIABLES
#-------------------------------------------------------------------------------

# Get the short host name
host=$($hostname -s) || exit 0200

# Get the script name and PID
script="$($basename $0)[$$]" || exit 0201

# Get the start date and time
date_start=$($date '+%Y-%m-%dT%H:%M:%S%:z')

# Get the start instant (seconds since 1970-01-01T00:00:00+00:00)
instant_start=$($date '+%s')

# Define the script user
user='{{file_owner_ntp_update_time_bash}}'

# Define the lockfile location
lockfile='{{file_path_ntp_script_dir}}/ntp_update-time.lock'

# Set the initial return value
retval=0

# Set the initial exit code
code='0000'

# Set the initial log severity
severity='Debug'

# Set the initial log message
message='Please check log files for more information.'

# List of NTP servers
ntp_servers='{% if (ntp_server is defined) and not ((ntp_server == None) or (ntp_server == '') or (ntp_server == [])) %}{% for server in ntp_server %}{{server}} {% endfor %}{% else %}ntp.{{ansible_domain}}{% endif %}'

{% if (ntp_monitor_mail_state is defined) and ((ntp_monitor_mail_state == 'true') or (ntp_monitor_mail_state == 'yes') or (ntp_monitor_mail_state == 'enable')) %}
# Define the mail sender
mail_sender='{% if (ntp_monitor_mail_sender is defined) and not ((ntp_monitor_mail_sender == None) or (ntp_monitor_mail_sender == '')) %}{{ntp_monitor_mail_sender}}{% else %}root@{{ansible_domain}}{% endif %}'

# Define the mail recipient
mail_recipient='{% if (ntp_monitor_mail_recipient is defined) and not ((ntp_monitor_mail_recipient == None) or (ntp_monitor_mail_recipient == '') or (ntp_monitor_mail_recipient == [])) %}{% for mail_recipient in ntp_monitor_mail_recipient %}{{mail_recipient}},{% endfor %}{% else %}admin@{{ansible_domain}}{% endif %}'

# Define the mail subject
mail_subject='{% if (ntp_monitor_mail_subject is defined) and not ((ntp_monitor_mail_subject == None) or (ntp_monitor_mail_subject == '')) %}{{ntp_monitor_mail_subject}}{% else %}NTP: Update Time - Error ({{ansible_hostname}}){% endif %}'
{% endif %}

#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------

{% if (ntp_monitor_mail_state is defined) and ((ntp_monitor_mail_state == 'true') or (ntp_monitor_mail_state == 'yes') or (ntp_monitor_mail_state == 'enable')) %}
# Mail monitoring
mail_error () {
  retval=$1
  code=$2
  severity=$3
  message=$4
  # Define the mail body
  mail_body="--------------------------------------------------------------------------------
ERROR
--------------------------------------------------------------------------------

Message     : $message
Severity    : $severity
Code        : $code
Date & Time : $($date '+%Y-%m-%dT%H:%M:%S%:z')

--------------------------------------------------------------------------------
SCRIPT
--------------------------------------------------------------------------------

Name        : ntp_update-time.bash
Type        : bash script
PID         : $$

--------------------------------------------------------------------------------
SYSTEM
--------------------------------------------------------------------------------

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}

--------------------------------------------------------------------------------
OPERATING SYSTEM
--------------------------------------------------------------------------------

Type        : {{ansible_system}}
Family      : {{ansible_os_family}}
Distribution: {{ansible_distribution}}
Version     : {{ansible_distribution_version}}
Architecture: {{ansible_architecture}}

--------------------------------------------------------------------------------
KERNEL
--------------------------------------------------------------------------------

Type        : {{ansible_system}}
Version     : {{ansible_kernel}}

--------------------------------------------------------------------------------
MAIL
--------------------------------------------------------------------------------

Sender      : $mail_sender
Recipient   : $mail_recipient
Subject     : $mail_subject"

{% if (ansible_os_family == 'Gentoo') %}
  $echo "$mail_body" | $mailx -a "From: "$mail_sender"" -s "$mail_subject" "$mail_recipient" > /dev/null 2>&1
{% else %}
  $echo "$mail_body" | $mailx -r "$mail_sender" -s "$mail_subject" "$mail_recipient" > /dev/null 2>&1
{% endif %}
}
{% endif %}

# Log and exit if return value is not equal zero
log_and_exit_if_error () {
  retval=$1
  code=$2
  severity=$3
  message=$4
  if [ $retval -ne 0 ]; then
    $rm -f $lockfile
    $echo "$($date '+%Y-%m-%dT%H:%M:%S%:z') - $host - $script: "$severity: $code - $message""
    $logger -t $script "$severity: $code - $message"
{% if (ntp_monitor_mail_state is defined) and ((ntp_monitor_mail_state == 'true') or (ntp_monitor_mail_state == 'yes') or (ntp_monitor_mail_state == 'enable')) %}
    mail_error $retval $code "$severity" "$message"
{% endif %}
    exit $retval
  fi
}

#-------------------------------------------------------------------------------
# CHECKS
#-------------------------------------------------------------------------------

# Check if script is running as correct user
if [ "$($whoami)" != "$user" ]; then
  code='0300'
  severity='Error'
  message="Please run script as user '$user'"
  $echo "$($date '+%Y-%m-%dT%H:%M:%S%:z') - $host - $script: "$severity "($code)": $message""
  exit $code
fi

#-------------------------------------------------------------------------------
# LOCKFILE
#-------------------------------------------------------------------------------

# Create lockfile
if [ ! -e $lockfile ]; then
  $touch $lockfile || log_and_exit_if_error "$?" '0400' 'Warning' 'Could not create lockfile. Please investigate.'
else
  log_and_exit_if_error "$?" '0401' 'Warning' 'Lockfile does already exist. Please investigate.'
fi

#-------------------------------------------------------------------------------
# SCRIPT
#-------------------------------------------------------------------------------

# Update the system time by polling NTP servers to determine the correct time
for ntp_server in $ntp_servers ; do
  $ntp_command $ntp_server > /dev/null 2>&1
  log_and_exit_if_error "$?" '0500' 'Error' 'Unable to update the system time.'
done

# Update the hardware clock to the system time
$hwclock -w
log_and_exit_if_error "$?" '0501' 'Error' 'Unable to update the hardware clock.'

#-------------------------------------------------------------------------------
# LOCKFILE
#-------------------------------------------------------------------------------

# Delete lockfile
if [ -e $lockfile ]; then
  $rm -f $lockfile || log_and_exit_if_error "$?" '0402' 'Warning' 'Could not delete lockfile. Please investigate.'
else
  log_and_exit_if_error "$?" '0403' 'Warning' 'Lockfile did not exist. Please investigate.'
fi

#-------------------------------------------------------------------------------
# LOGGING
#-------------------------------------------------------------------------------

# Get the end date and time
date_end=$($date '+%Y-%m-%dT%H:%M:%S%:z')

# Get the end instant (seconds since 1970-01-01T00:00:00+00:00)
instant_end=$($date '+%s')

# Calculate execution time
exec_calc=$($expr $instant_end - $instant_start)

# Convert execution time
exec_time=$($date -d "1970-01-01 $exec_calc sec" '+%H:%M:%S')

# Logging and alerting
retval=0
code='0000'
severity='Informational'
message='System time and hardware clock updated.'
$logger -t $script "$severity: $message"
$logger -t $script "Duration: $exec_time"

exit $retval

#!/usr/bin/env sh

#-------------------------------------------------------------------------------
#                             ANSIBLE MANAGED FILE
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#
# Name   : ntp_update-time.sh
# Type   : Shell script
# Role   : ntp
#
# Authors: liv community
# License: Simplified BSD License
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SHELL VARIABLES
#-------------------------------------------------------------------------------

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'

#-------------------------------------------------------------------------------
# COMMANDS
#-------------------------------------------------------------------------------

which='/usr/bin/which' && [ -x $which ] || { echo "Error: Command 'which' not found."; exit 127; }
basename=$($which basename) || { echo "Error: Command 'basename' not found."; exit 127; }
date=$($which date) || { echo "Error: Command 'date' not found."; exit 127; }
echo=$($which echo) || { echo "Error: Command 'echo' not found."; exit 127; }
expr=$($which expr) || { echo "Error: Command 'expr' not found."; exit 127; }
hostname=$($which hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
logger=$($which logger) || { echo "Error: Command 'logger' not found."; exit 127; }
{% if (ntp_monitor_mail_state|match('true|yes|enable')) %}
mailx=$($which mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}
rm=$($which rm) || { echo "Error: Command 'rm' not found."; exit 127; }
touch=$($which touch) || { echo "Error: Command 'touch' not found."; exit 127; }
whoami=$($which whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

# NTP command
ntp_command='{{ntp_command}}'

#-------------------------------------------------------------------------------
# VARIABLES
#-------------------------------------------------------------------------------

# Get the short host name
host=$($hostname -s) || { echo "Error: Host name unknown."; exit 68; }

# Get the script name and PID
script="$($basename $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }

# Get the start date and time
date_start=$($date '+%Y-%m-%dT%H:%M:%S%z')

# Get the start time (seconds since 1970-01-01T00:00:00+00:00)
time_start=$($date '+%s')

# Define the script user
user='{{file_owner_ntp_update_time_sh}}'

# Define the lockfile location
lockfile='{{file_path_ntp_script_dir}}/ntp_update-time.lock'

# Set the initial return value
retval=0

# Define the initial log severity
severity='Debug'

# Define the initial log message
message='Please check log files for more information.'

# List of NTP servers
ntp_servers='{% for item in (ntp_server|sort) %}{% if not ((item.server == '') or (item.server == [])) %}{% for server in (item.server|sort) %}{{(server|e)}}{% if not loop.last %} {% endif %}{% endfor %}{% endif %}{% endfor %}'

{% if (ntp_monitor_mail_state|match('true|yes|enable')) %}
# Define the mail sender
mail_sender='{{(ntp_monitor_mail_sender|e)}}'

# Define the mail recipient
mail_recipient='{% for mail_recipient in ntp_monitor_mail_recipient %}{{(mail_recipient|e)}}{% if not loop.last %},{% endif %}{% endfor %}'

# Define the mail subject
mail_subject='{{(ntp_monitor_mail_subject|e)}}'
{% endif %}

#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------

{% if (ntp_monitor_mail_state|match('true|yes|enable')) %}
# Mail monitoring
mail_error() {
  retval=$1
  severity=$2
  message=$3
  # Define the mail body
  mail_body="--------------------------------------------------------------------------------
ERROR
--------------------------------------------------------------------------------

Message     : $message
Severity    : $severity
Date & Time : $($date '+%Y-%m-%dT%H:%M:%S%z')

--------------------------------------------------------------------------------
SCRIPT
--------------------------------------------------------------------------------

Name        : ntp_update-time.sh
Type        : Shell script
PID         : $$

--------------------------------------------------------------------------------
SYSTEM
--------------------------------------------------------------------------------

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}

--------------------------------------------------------------------------------
OPERATING SYSTEM
--------------------------------------------------------------------------------

Type        : {{ansible_system}}
Family      : {{ansible_os_family}}
Distribution: {{ansible_distribution}}
Version     : {{ansible_distribution_version}}
Architecture: {{ansible_architecture}}

--------------------------------------------------------------------------------
KERNEL
--------------------------------------------------------------------------------

Type        : {{ansible_system}}
Version     : {{ansible_kernel}}

--------------------------------------------------------------------------------
MAIL
--------------------------------------------------------------------------------

Sender      : $mail_sender
Recipient   : $mail_recipient
Subject     : $mail_subject"

{% if (ansible_os_family == 'FreeBSD') %}
  $echo "$mail_body" | $mailx -s "$mail_subject" -F "$mail_recipient" > /dev/null 2>&1
{% else %}
  $echo "$mail_body" | $mailx -a "From: "$mail_sender"" -s "$mail_subject" "$mail_recipient" > /dev/null 2>&1
{% endif %}
}
{% endif %}

# Check if script is running as correct user
check_script_user() {
  if [ "$($whoami)" != "$user" ]; then
    retval=77
    severity='Error'
    message="Please run script as user '$user'"
    $echo "$($date '+%Y-%m-%dT%H:%M:%S%z') - $host - $script: "$severity: $message""
    exit $retval
  fi
}

# Create lockfile
create_lockfile() {
  if [ ! -e $lockfile ]; then
    $touch $lockfile || log_and_exit_on_error "$?" 'Warning' 'Could not create lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile does already exist. Please investigate.'
  fi
}

# Remove lockfile
remove_lockfile() {
  if [ -e $lockfile ]; then
    $rm -f $lockfile || log_and_exit_on_error "$?" 'Warning' 'Could not remove lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile did not exist. Please investigate.'
  fi
}

# Log and exit if return value is not equal zero
log_and_exit_on_error() {
  retval=$1
  severity=$2
  message=$3
  if [ $retval -ne 0 ]; then
    $rm -f $lockfile
    $echo "$($date '+%Y-%m-%dT%H:%M:%S%z') - $host - $script: "$severity: $message""
    $logger -t $script "$severity: $message"
{% if (ntp_monitor_mail_state|match('true|yes|enable')) %}
    mail_error $retval "$severity" "$message"
{% endif %}
    exit $retval
  fi
}

# Log and exit
log_and_exit() {
  # Get the end date and time
  date_end=$($date '+%Y-%m-%dT%H:%M:%S%z')

  # Get the end time (seconds since 1970-01-01T00:00:00+00:00)
  time_end=$($date '+%s')

  # Calculate execution time
  time_exec=$($expr $time_end - $time_start)

  # Convert execution time into human readable format
  time_hr=$($date -u -r "$time_exec" '+%H:%M:%S')

  # Logging and alerting
  retval=0
  severity='Info'
  message='System time and hardware clock updated.'
  $logger -t $script "$severity: $message Duration: $time_hr"

  exit $retval
}

#-------------------------------------------------------------------------------
# SCRIPT
#-------------------------------------------------------------------------------

# Check if script is running as correct user
check_script_user

# Create lockfile
create_lockfile

# Update the system time by polling NTP servers to determine the correct time
for ntp_server in $ntp_servers ; do
  $ntp_command $ntp_server > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    ntp_status=0
    break;
  else
    ntp_status=1
  fi
done
log_and_exit_on_error "$ntp_status" 'Error' 'Unable to update the system time.'

# Remove lockfile
remove_lockfile

# Log and exit
log_and_exit
